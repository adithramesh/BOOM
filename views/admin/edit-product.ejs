<!DOCTYPE HTML>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Edit Product</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Add your CSS files here -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">

    <link href="/admin/css/main.css" rel="stylesheet" type="text/css" />
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        h2 {
            text-align: center;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            font-weight: bold;
        }
        input[type="text"],
        input[type="number"],
        textarea,
        select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }
        input[type="number"].size-quantity-input {
            width: calc(100% - 20px); /* Adjust width as needed */
            padding: 5px; /* Adjust padding as needed */
        }
        button[type="submit"] {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        button[type="submit"]:hover {
            background-color: #0056b3;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Edit Product</h2>
        <form id="editProductForm" method="POST" action="/admin/edit-product/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validateForm()">

            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" value="<%= product.name %>" required>
                <span id="nameError" class="error"></span>
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <textarea id="description" name="description" required><%= product.description %></textarea>
                <span id="descriptionError" class="error"></span>
            </div>
            <div class="form-group">
                <label for="originalPrice">Original Price:</label>
                <input type="number" name="originalPrice" id="originalPrice" value="<%= product.originalPrice %>" class="form-control" required onkeyup="validatePrice()">
                <span id="priceError"></span>    
            </div>
            <div class="form-group">
                <label for="discountPercentage">Discount Percentage:</label>
                <input type="number" name="discountPercentage" id="discountPercentage" value="<%= product.discountPercentage %>" class="form-control" min="0" max="90" required>
            </div>
            <div class="form-group">
                <label for="sizes">Sizes and Quantities:</label>
                <div class="d-flex flex-wrap">
                    <% ['XS', 'S', 'M', 'L', 'XL'].forEach(size => { %>
                        <div class="form-check mr-3">
                            <input class="form-check-input" type="checkbox" name="sizes[]" id="size<%= size %>" value="<%= size %>" onchange="toggleQuantityInput('<%= size %>')" <% if (product.sizes.some(item => item.size === size)) { %> checked <% } %>>
                            <label class="form-check-label" for="size<%= size %>"><%= size %></label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <input type="number" name="quantities[<%= size %>]" id="quantity<%= size %>" class="form-control size-quantity-input" placeholder="Quantity for <%= size %>" style="display:<%= product.sizes.some(item => item.size === size) ? 'block' : 'none' %>" value="<%= product.sizes.find(item => item.size === size)?.quantity || '' %>">
                            <span id="quantityError<%= size %>" class="error"></span>
                        </div>
                    <% }); %>
                </div>
            </div>
            <div class="form-group">
                <label for="colour">Colour:</label>
                <input type="text" id="colour" name="colour" value="<%= product.colour %>" required>
                <span id="colourError" class="error"></span>
            </div>
            <div class="form-group">
                <label for="category">Category:</label>
                <select id="category" name="category" required>
                    <% categories.forEach(category => { %>
                        <option value="<%= category._id %>" <%= product.category == category._id ? 'selected' : '' %>><%= category.name %></option>
                    <% }); %>
                </select>
            </div>
            <div class="form-group">
                <label for="Images">Images:</label>
                <input type="file" id="images" name="images[]" accept="image/*" multiple class="form-control-file">
                <div id="selectedImages">
                    <% product.images.forEach(images => { %>
                        <img src="<%= images %>" alt="Product Image" style="width: 100px; margin-right: 10px;">
                    <% }); %>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
    // function validateQuantity(){
        
    //     const quantity=document.getElementById("quantity").value
    //     const quantityError=document.getElementById("quantityError")
    //     if (quantity<=0){
    //        quantityError.innerHTML="Enter a positive value"
    //        quantityError.style.color="red"
    //        return false
    //     }else{
    //         quantityError.innerHTML=""
    //         return true
    //     }
    // }

    function validatePrice(){
        
        const price=document.getElementById("originalprice").value
        const priceError=document.getElementById("priceError")
        if (price<=0){
            priceError.innerHTML="Enter a positive value"
            priceError.style.color="red"
           return false
        }else{
            priceError.innerHTML=""
            return true
        }
    }
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
    const imagesInput = document.getElementById('images');
    const selectedImagesContainer = document.getElementById('selectedImages');

    imagesInput.addEventListener('change', function(event) {
        const selectedFiles = event.target.files; // Get selected files
        selectedImagesContainer.innerHTML = ''; // Clear previous content

        // Loop through selected files
        for (let i = 0; i < selectedFiles.length; i++) {
            const file = selectedFiles[i];
            if (file.type.startsWith('image/')) { // Check if file is an image
                // Create image element for preview
                const imageElement = document.createElement('img');
                imageElement.src = URL.createObjectURL(file); // Set image source
                imageElement.style.width = '100px';
                imageElement.style.marginRight = '10px';
                selectedImagesContainer.appendChild(imageElement); // Add to container
            } else {
                alert('Please select only image files.'); // Show error message
                event.target.value = ''; // Clear the file input to prevent uploading
                return; // Exit function
            }
        }
    });

    document.getElementById('images').addEventListener('change', function(event) {
            const selectedFiles = event.target.files; // Get selected files
    
            // Loop through selected files
            for (let i = 0; i < selectedFiles.length; i++) {
                const file = selectedFiles[i];
                if (!file.type.startsWith('image/')) { // Check if file is not an image
                    alert('Please select only image files.'); // Show error message
                    event.target.value = ''; // Clear the file input to prevent uploading
                    return; // Exit function
                }
            }
        });

    const editProductForm = document.getElementById('editProductForm');

    editProductForm.addEventListener('submit', function(event) {
        const formData = new FormData(this); // Create FormData object from form
    });
});


</script>
<script>

function validateQuantity(size) {
        const quantityInput = document.getElementById('quantity' + size);
        const quantityError = document.getElementById('quantityError' + size);
        const quantity = quantityInput.value;
        if (quantity <= 0) {
            quantityError.innerHTML = "Enter a positive value";
            return false;
        } else {
            quantityError.innerHTML = "";
            return true;
        }
    }

    function validateField(fieldId, errorId, errorMessage, regex = null) {
        const field = document.getElementById(fieldId);
        const errorField = document.getElementById(errorId);
        if (!field.value.trim()) {
            errorField.innerHTML = errorMessage;
            return false;
        } else if (regex && !regex.test(field.value.trim())) {
            errorField.innerHTML = "Invalid format";
            return false;
        } else {
            errorField.innerHTML = "";
            return true;
        }
    }

    function validateForm() {
        const sizes = ['XS', 'S', 'M', 'L', 'XL'];
        let isValid = true;

        // Validate sizes and quantities
        sizes.forEach(size => {
            if (document.getElementById('size' + size).checked) {
                if (!validateQuantity(size)) {
                    isValid = false;
                }
            }
        });

        // Regex patterns
        const nameRegex = /^[a-zA-Z0-9\s]+$/; // Example regex for name
        const descriptionRegex = /^[a-zA-Z0-9\s.,!?]+$/; // Example regex for description
        const colourRegex = /^[a-zA-Z\s]+$/; // Example regex for colour

        // Validate other fields with regex
        if (!validateField('name', 'nameError', 'Name is required', nameRegex)) isValid = false;
        if (!validateField('description', 'descriptionError', 'Description is required', descriptionRegex)) isValid = false;
        if (!validateField('colour', 'colourError', 'Colour is required', colourRegex)) isValid = false;

        return isValid;
    }
    function toggleQuantityInput(size) {
        const quantityInput = document.getElementById('quantity' + size);
        if (document.getElementById('size' + size).checked) {
            quantityInput.style.display = 'block';
        } else {
            quantityInput.style.display = 'none';
            quantityInput.value = ''; // Clear the input value if unchecked
        }
    }
</script>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    
</body>
</html>


<!-- <script>
    document.getElementById('images').addEventListener('change', function(event) {
        const selectedFiles = event.target.files; // Get selected files
        const selectedImagesContainer = document.getElementById('selectedImages');
        selectedImagesContainer.innerHTML = ''; // Clear previous content

        // Loop through selected files
        for (let i = 0; i < selectedFiles.length; i++) {
            const file = selectedFiles[i];
            if (file.type.startsWith('image/')) { // Check if file is an image
                // Create image element for preview
                const imageElement = document.createElement('img');
                imageElement.src = URL.createObjectURL(file); // Set image source
                imageElement.style.width = '100px';
                imageElement.style.marginRight = '10px';
                selectedImagesContainer.appendChild(imageElement); // Add to container
            }
        }
    });
    // Client-side file type validation
    
    document.getElementById('images').addEventListener('change', function(event) {
            const selectedFiles = event.target.files; // Get selected files
    
            // Loop through selected files
            for (let i = 0; i < selectedFiles.length; i++) {
                const file = selectedFiles[i];
                if (!file.type.startsWith('image/')) { // Check if file is not an image
                    alert('Please select only image files.'); // Show error message
                    event.target.value = ''; // Clear the file input to prevent uploading
                    return; // Exit function
                }
            }
        });
    </script> -->
