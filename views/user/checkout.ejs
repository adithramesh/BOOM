<!DOCTYPE html>
<html lang="en">
<head>
    <title>Proceed to Checkout</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Mukta:300,400,700">
    <link rel="stylesheet" href="/user/fonts/icomoon/style.css">
    <link rel="stylesheet" href="/user/css/bootstrap.min.css">
    <link rel="stylesheet" href="/user/css/magnific-popup.css">
    <link rel="stylesheet" href="/user/css/jquery-ui.css">
    <link rel="stylesheet" href="/user/css/owl.carousel.min.css">
    <link rel="stylesheet" href="/user/css/owl.theme.default.min.css">
    <link rel="stylesheet" href="/user/css/aos.css">
    <link rel="stylesheet" href="/user/css/style.css">
    <style>
        body {
            margin-top: 5px; /* Add space at the top of the page */
        }
        h2 {
            color: black;
            margin-bottom: 20px;
        }
        .address, .form-group {
            margin-bottom: 15px;
        }
        .address h3 {
            margin-bottom: 5px;
        }
        .saved-addresses p {
            margin-bottom: 5px;
        }
        #addAddressForm {
            margin-top: 20px;
        }
        .btn-block {
            margin-top: 20px;
            margin-bottom: 20px;
        }
        .payment-option {
            margin-bottom: 10px; /* Reduce gap between payment options */
        }
        .container {
            margin-top: 20px; /* Add space at the top */
        }
        .cart-details {
            border: 1px solid #ddd;
            padding: 10px;
            margin-top: 20px;
        }
        .cart-details table {
            width: 100%;
        }
        .cart-details th, .cart-details td {
            padding: 8px;
            text-align: left;
        }
        .cart-details th {
            background-color: #f2f2f2;
        }
    </style>

    <script src="/user/js/jquery-3.3.1.min.js"></script>
    <script src="/user/js/jquery-ui.js"></script>
    <script src="/user/js/popper.min.js"></script>
    <script src="/user/js/bootstrap.min.js"></script>
</head>
<body>
    <div class="site-wrap">
    

        <div class="site-navbar bg-white py-2">
    
            <div class="search-wrap">
                <div class="container">
                    <a href="#" class="search-close js-search-close"><span class="icon-close2"></span></a>
                    <form action="#" method="post">
                        <input type="text" class="form-control" placeholder="Search keyword and hit enter...">
                    </form>  
                </div>
            </div>
    
            <div class="container">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="logo">
                        <div class="site-logo">
                            <a href="/user/index" class="js-logo-clone">BOOM</a>
                        </div>
                    </div>
                    <div class="main-nav d-none d-lg-block">
                        <nav class="site-navigation text-right text-md-center" role="navigation">
                            <ul class="site-menu js-clone-nav d-none d-lg-block">
                                <li class="active">
                                    <a href="/user/index">Home</a>
                                  </li>
                                <li><a href="/user/shop">Shop</a></li>
                               
                        </nav>
                    </div>
                    <div class="icons">
                        <a href="#" class="icons-btn d-inline-block js-search-open"><span class="icon-search"></span></a>
                        <a href="/user/user-profile" class="icons-btn d-inline-block"><span class="icon-user"></span></a>
                        <a href="#" class="icons-btn d-inline-block"><span class="icon-heart-o"></span></a>
                        <a href="/user/cart" class="icons-btn d-inline-block bag">
                            <span class="icon-shopping-bag"></span>
                            <!-- <span class="number">2</span> -->
                        </a>
                        <a href="#" class="site-menu-toggle js-menu-toggle ml-3 d-inline-block d-lg-none"><span class="icon-menu"></span></a>
                    </div>
                </div>
            </div>
        </div>

           <!-- Breadcrumb navigation -->
    <div class="bg-light py-3">
        <div class="container">
            <div class="row">
                <div class="col-md-12 mb-0"><a href="/user/index">Home</a> <span class="mx-2 mb-0">/</span> <a href="/user/cart">Cart</a> <span class="mx-2 mb-0">/</span> <strong class="text-black">Checkout</strong></div>
            </div>
        </div>
    </div>
    
<!-- content     -->
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h2>Saved Addresses</h2>
            <div id="savedAddresses"  name="selectedAddressId" class="saved-addresses">
                <% if (addresses && addresses.length > 0) { %>
                    <% addresses.forEach(address => { %>
                        <div class="address-item p-3 mb-3 bg-light" data-id="<%= address._id %>">
                            <input type="radio" name="selectedAddress" value="<%= address._id %>" required onclick="updateSelectedAddress('<%= address._id %>')">
                            <h4><%= address.addressType %> Address</h4>
                            <p><%= address.userName %>, <%= address.houseName %>, <%= address.street %>, <%= address.city %>, <%= address.state %>, <%= address.country %> - <%= address.zipCode %></p>
                            <div class="button-container">
                                <button class="btn btn-primary btn-sm" onclick="editAddress(this, '<%= address._id %>')">Edit</button>
                                <button class="btn btn-danger btn-sm" onclick="deleteAddress(this, '<%= address._id %>')">Delete</button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No saved addresses. Please add one below.</p>
                <% } %>
            </div>
            <button type="button" class="btn btn-secondary" id="showAddAddress">Add Address</button>
            <form id="addressForm" name="selectedAddressId" style="display: none;">
                <h2>Add/Edit Address</h2>
                <input type="hidden" id="addressId">
                <div class="form-group">
                    <label for="userName">Name</label>
                    <input type="text" id="userName" name="userName" class="form-control" required>
                    <div id="userNameError" class="text-danger"></div>
                </div>
                <div class="form-group">
                    <label for="addressType">Address Type</label>
                    <select id="addressType" name="addressType" class="form-control" required>
                        <option value="Home">Home</option>
                        <option value="Work">Work</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="addressTypeError" class="text-danger"></div>
                </div>
                <div class="form-group">
                    <label for="houseName">House Name</label>
                    <input type="text" id="houseName" name="houseName" class="form-control" required>
                    <div id="houseNameError" class="text-danger"></div>
                </div>
                <div class="form-group">
                    <label for="street">Street</label>
                    <input type="text" id="street" name="street" class="form-control" required>
                    <div id="streetError" class="text-danger"></div>
                </div>
                <div class="form-group">
                    <label for="city">City</label>
                    <input type="text" id="city" name="city" class="form-control" required>
                    <div id="cityError" class="text-danger"></div>
                </div>
                <div class="form-group">
                    <label for="state">State</label>
                    <input type="text" id="state" name="state" class="form-control" required>
                    <div id="stateError" class="text-danger"></div>
                </div>
                <div class="form-group">
                    <label for="country">Country</label>
                    <input type="text" id="country" name="country" class="form-control" required>
                    <div id="countryError" class="text-danger"></div>
                </div>
                <div class="form-group">
                    <label for="zipCode">Zip Code</label>
                    <input type="text" id="zipCode" name="zipCode" class="form-control" required>
                    <div id="zipCodeError" class="text-danger"></div>
                </div>
                <button type="submit" class="btn btn-primary btn-block">Save Address</button>
            </form>
        </div>

<!-- Cart Details Column -->
<div class="col-md-6">
    <div class="cart-details">
      <h2>Your order</h2>
      <table>
        <thead>
          <tr>
            <th>Product Name</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
          </tr>
        </thead>
        <tbody>
          <% cart.items.forEach(item => { %>
            <tr>
              <td><%= item.name %></td>
              <td><%= item.quantity %></td>
              <td>₹<%= item.price %></td>
              <td>₹<%= item.quantity * item.price %></td>
            </tr>
          <% }); %>
        </tbody>
        <tfoot>
          <tr>
            <td colspan="3"><strong>Subtotal</strong></td>
            <td id="subtotal"><strong>₹<%= cart.subTotal.toFixed(2) %></strong></td>
          </tr>
          <tr>
            <td colspan="3"><strong>Discount</strong></td>
            <td id="discount"><strong>₹<%= cart.discount.toFixed(2) %></strong></td>
          </tr>
          <tr>
            <td colspan="3"><strong>Delivery Charge</strong></td>
            <td id="discount"><strong>₹<%= cart.deliveryCharge.toFixed(2) %></strong></td>
          </tr>
          <tr>
            <td colspan="3"><strong>Total</strong></td>
            <td id="total"><strong>₹<%= (cart.totalPrice + cart.deliveryCharge).toFixed(2) %></strong></td>
          </tr>
        </tfoot>
      </table>
    </div>
  </div>
  </div>
  
            <!-- Combined Address Selection and Payment Options Form -->
            <div class="row">
                <div class="col-md-6">
            <h2>Payment Options</h2>

    <form id="paymentForm" onsubmit="handlePaymentSubmit(event)">
    
        <input type="hidden" id="selectedAddressId" name="selectedAddressId">
    <!-- Payment options -->
    <div class="form-group payment-option">
        <input type="radio" name="paymentMethod" value="COD" required> Cash on Delivery (COD)
    </div>
    <div class="form-group payment-option">
        <input type="radio" name="paymentMethod" value="UPI" required> UPI
    </div>
    <div class="form-group payment-option">
        <input type="radio" name="paymentMethod" value="wallet" required> Wallet
    </div>
    <button type="submit" class="btn btn-primary btn-lg btn-block">Place Order</button>
</form>
        </div>
    </div>
    </div>
</div>



<script>

    function updateSelectedAddress(addressId) {
        document.getElementById('selectedAddressId').value = addressId;
        }
        
    function validateForm() {
    const selectedAddressId = document.getElementById('selectedAddressId').value;
        if (!selectedAddressId) {
            swal.fire({
                    title: 'Error!',
                    text: 'Please select an address.',
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
            return false;
        }
        return true;
    }
    document.getElementById('showAddAddress').addEventListener('click', function() {
        var form = document.getElementById('addressForm');
        if (form.style.display === 'none') {
            form.style.display = 'block';
        } else {
            form.style.display = 'none';
        }
    });

    document.getElementById('addressForm').addEventListener('submit', async function(event) {
        event.preventDefault();
        if (!validateAddress()) {
            return;
        }
        const addressId = document.getElementById('addressId').value;
        const address = {
            userName: document.getElementById('userName').value.trim(),
            addressType: document.getElementById('addressType').value.trim(),
            houseName: document.getElementById('houseName').value.trim(),
            street: document.getElementById('street').value.trim(),
            city: document.getElementById('city').value.trim(),
            state: document.getElementById('state').value.trim(),
            country: document.getElementById('country').value.trim(),
            zipCode: document.getElementById('zipCode').value.trim()
        };

        let response;
        if (addressId) {
            // Editing an existing address
            response = await fetch(`/user/address/${addressId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(address)
            });
        } else {
            // Adding a new address
            response = await fetch('/user/address', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(address)
            });
        }

        if (response.ok) {
            const savedAddress = await response.json();
            if (addressId) {
                updateAddressInUI(savedAddress);
            } else {
                addAddressToUI(savedAddress);
                window.location.reload();
            }
            clearAddressForm();
            document.getElementById('addressForm').style.display = 'none';
        }
    });

    function clearAddressForm() {
        document.getElementById('addressForm').reset();
        document.getElementById('addressId').value = '';
    }

    function validateAddress() {
        let errors = '';
        const houseName = document.getElementById('houseName').value.trim();
        const street = document.getElementById('street').value.trim();
        const city = document.getElementById('city').value.trim();
        const state = document.getElementById('state').value.trim();
        const country = document.getElementById('country').value.trim();
        const zipCode = document.getElementById('zipCode').value.trim();

        const houseNameError = document.getElementById('houseNameError');
        const streetError = document.getElementById('streetError');
        const cityError = document.getElementById('cityError');
        const stateError = document.getElementById('stateError');
        const countryError = document.getElementById('countryError');
        const zipCodeError = document.getElementById('zipCodeError');

        houseNameError.innerHTML = '';
        streetError.innerHTML = '';
        cityError.innerHTML = '';
        stateError.innerHTML = '';
        countryError.innerHTML = '';
        zipCodeError.innerHTML = '';

        const spacesRegex = /^\s*$/;

        if (spacesRegex.test(houseName)) {
            houseNameError.innerHTML = 'House Name/No. is required.';
            errors += 'House Name/No. is required.\n';
        }
        if (spacesRegex.test(street)) {
            streetError.innerHTML = 'Street is required.';
            errors += 'Street is required.\n';
        }
        if (spacesRegex.test(city) || !/^[a-zA-Z\s]+$/.test(city)) {
            cityError.innerHTML = 'City is required and must contain only letters.';
            errors += 'City is required and must contain only letters.\n';
        }
        if (spacesRegex.test(state) || !/^[a-zA-Z\s]+$/.test(state)) {
            stateError.innerHTML = 'State is required and must contain only letters.';
            errors += 'State is required and must contain only letters.\n';
        }
        if (spacesRegex.test(country) || !/^[a-zA-Z\s]+$/.test(country)) {
            countryError.innerHTML = 'Country is required and must contain only letters.';
            errors += 'Country is required and must contain only letters.\n';
        }
        if (spacesRegex.test(zipCode) || !/^\d{6}$/.test(zipCode)) {
            zipCodeError.innerHTML = 'Zip Code is required and must be a valid 6-digit number.';
            errors += 'Zip Code is required and must be a valid 6-digit number.\n';
        }

        if (errors) {
            return false;
        } else {
            return true;
        }
    }

    function addAddressToUI(address) {
        const addressContainer = document.createElement('div');
        addressContainer.classList.add('address-item', 'p-3', 'mb-3', 'bg-light');
        addressContainer.setAttribute('data-id', address._id);
        addressContainer.innerHTML = `
            <input type="radio" name="selectedAddress" value="${address._id}" required>
            <h4>${address.addressType} Address</h4>
            <p>${address.userName}, ${address.houseName}, ${address.street}, ${address.city}, ${address.state}, ${address.country} - ${address.zipCode}</p>
            <div class="button-container">
                <button class="btn btn-primary btn-sm" onclick="editAddress(this, '${address._id}')">Edit</button>
                <button class="btn btn-danger btn-sm" onclick="deleteAddress(this, '${address._id}')">Delete</button>
            </div>
        `;
    //     document.getElementById('savedAddresses').appendChild(addressContainer);
    //        // Add event listener to the new radio button
    //     const newRadioButton = addressContainer.querySelector('input[type="radio"]');
    //     newRadioButton.addEventListener('click', function() {
    //         updateSelectedAddress(this.value);
    // });
        
    }

    function updateAddressInUI(address) {
        const addressContainer = document.querySelector(`.address-item[data-id="${address._id}"]`);
        if (addressContainer) {
            addressContainer.querySelector('h4').innerText = `${address.addressType} Address`;
            addressContainer.querySelector('p').innerText = `${address.userName}, ${address.houseName}, ${address.street}, ${address.city}, ${address.state}, ${address.country} - ${address.zipCode}`;
        }
    }

    function editAddress(button, addressId) {
        const addressItem = button.closest('.address-item');
        document.getElementById('addressId').value = addressId;
        document.getElementById('addressType').value = addressItem.querySelector('h4').innerText.replace(' Address', '');
        const [userName, houseName, street, city, state, countryZip] = addressItem.querySelector('p').innerText.split(',').map(detail => detail.trim());
        document.getElementById('userName').value = userName;
        document.getElementById('houseName').value = houseName;
        document.getElementById('street').value = street;
        document.getElementById('city').value = city;
        document.getElementById('state').value = state;
        const [country, zipCode] = countryZip.split('-').map(detail => detail.trim());
        document.getElementById('country').value = country;
        document.getElementById('zipCode').value = zipCode;
        document.getElementById('addressForm').style.display = 'block';
    }

    async function deleteAddress(button, addressId) {
        const response = await fetch(`/user/address/${addressId}`, {
            method: 'DELETE'
        });
        if (response.ok) {
            button.closest('.address-item').remove();
        }
    }


// async function handlePaymentSubmit(event) {
//     event.preventDefault();

//     // Retrieve selected payment method and address ID
//     const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
//     const selectedAddressInput = document.querySelector('input[name="selectedAddress"]:checked');

//     if (!selectedAddressInput) {
//         alert('Please select an address.');
//         return;
//     }

//     const selectedAddressId = selectedAddressInput.value;
//     const amt = document.getElementById("total").textContent.trim();
//     const amount = parseFloat(amt.replace(/[^0-9.-]/g, ''));

//     // Validate payment method and amount (if needed)
//     if (selectedPaymentMethod === 'COD' && amount > 1000) {
//         swal({
//             title: "Payment Option Not Allowed",
//             text: "Cash on Delivery (COD) option cannot be used for orders above Rs. 1000.",
//             icon: "warning",
//             button: "OK",
//         });
//         return;
//     }

//     if (selectedPaymentMethod === 'UPI') {
//         try {
//             // Create a Razorpay order
//             const response = await fetch('/user/create-razorpay-order', {
//                 method: 'POST',
//                 headers: {
//                     'Content-Type': 'application/json'
//                 },
//                 body: JSON.stringify({ amount: amount * 100 }) // Convert to paise
//             });

//             if (!response.ok) {
//                 throw new Error('Failed to create Razorpay order.');
//             }

//             // Retrieve order data from response
//             const orderData = await response.json();

//             // Configure Razorpay options for payment handling
//             const options = {
//                 key: 'rzp_test_qzAibN7X6K7MAx',
//                 amount: orderData.order.amount,
//                 currency: 'INR',
//                 name: 'BOOM Apparel Shopping',
//                 description: 'Order Payment',
//                 order_id: orderData.order.id,
//                 handler: async function (response) {
//                     try {
//                         // Construct payment details to send to server
//                         const paymentDetails = {
//                             selectedAddressId: selectedAddressId,
//                             selectedPaymentMethod: selectedPaymentMethod,
//                             razorpay_payment_id: response.razorpay_payment_id,
//                             razorpay_order_id: response.razorpay_order_id,
//                             razorpay_signature: response.razorpay_signature
//                         };

//                         // Send payment details to server for verification
//                         const verificationResponse = await fetch('/user/orders/status', {
//                             method: 'POST',
//                             headers: {
//                                 'Content-Type': 'application/json'
//                             },
//                             body: JSON.stringify(paymentDetails)
//                         });

//                         if (!verificationResponse.ok) {
//                             throw new Error('Failed to verify payment.');
//                         }

//                         const data = await verificationResponse.json();

//                         // Handle server response
//                         if (data.success) {
//                             // Redirect to thank you page on successful payment
//                             window.location.href = '/user/thankyou';
//                         } else {
//                             // Display error and redirect to my orders page on payment failure
//                             alert('Payment verification failed.');
//                             window.location.href = '/user/my-orders';
//                         }
//                     } catch (error) {
//                         console.error('Error processing payment:', error);
//                         alert('Failed to process payment.');
//                         window.location.href = '/user/orders/status'; // Redirect to orders page on failure
//                     }
//                 },
//                 theme: {
//                     color: '#3399cc'
//                 },
//                 modal: {
//                     ondismiss: function () {
//                         alert('Payment failed or was cancelled.');

//                         // Create a form dynamically
//                         const form = document.createElement('form');
//                         form.method = 'POST';
//                         form.action = '/user/orders/status'; // Your endpoint

//                         // Create hidden input fields for payment details
//                         const paymentDetails = {
//                             selectedAddressId: selectedAddressId,
//                             selectedPaymentMethod: selectedPaymentMethod,
//                             razorpay_payment_id: '', // Empty because payment was not completed
//                             razorpay_order_id: orderData.order.id,
//                             razorpay_signature: ''
//                         };

//                         for (const key in paymentDetails) {
//                             if (paymentDetails.hasOwnProperty(key)) {
//                                 const hiddenField = document.createElement('input');
//                                 hiddenField.type = 'hidden';
//                                 hiddenField.name = key;
//                                 hiddenField.value = paymentDetails[key];
//                                 form.appendChild(hiddenField);
//                             }
//                         }

//                         // Append the form to the body and submit
//                         document.body.appendChild(form);
//                         form.submit();
//                     }
//                 }
//             };

//             // Initialize Razorpay instance with options and open payment modal
//             const rzp1 = new Razorpay(options);
//             rzp1.open();

//         } catch (error) {
//             console.error('Error creating Razorpay order:', error);
//             alert('Failed to create Razorpay order.');
//         }
//     } else if (selectedPaymentMethod === "COD") {
//         const paymentDetails = {
//             selectedAddressId: selectedAddressId,
//             selectedPaymentMethod: selectedPaymentMethod
//         };

//         try {
//             const response = await fetch('/user/orders/status', {
//                 method: 'POST',
//                 headers: {
//                     'Content-Type': 'application/json'
//                 },
//                 body: JSON.stringify(paymentDetails)
//             });

//             if (!response.ok) {
//                 throw new Error('Failed to place order.');
//             }

//             const responseData = await response.json();

//             if (responseData.success) {
//                 window.location.href = '/user/thankyou';
//             } else {
//                 throw new Error('Failed to verify payment.');
//             }

//         } catch (error) {
//             console.error('Error processing order:', error);
//             alert('Failed to place order.');
//         }
//     }
// }

async function handlePaymentSubmit(event) {
    event.preventDefault();

    // Retrieve selected payment method and address ID
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
    const selectedAddressInput = document.querySelector('input[name="selectedAddress"]:checked');

    if (!selectedAddressInput) {
        swal({
                    title: 'Error!',
                    text: 'Please select an address.',
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
        return;
    }

    const selectedAddressId = selectedAddressInput.value;
    const amt = document.getElementById("total").textContent.trim();
    const amount = parseFloat(amt.replace(/[^0-9.-]/g, ''));

    // Validate payment method and amount (if needed)
    if (selectedPaymentMethod === 'COD' && amount > 1000) {
        swal({
            title: "Payment Option Not Allowed",
            text: "Cash on Delivery (COD) option cannot be used for orders above Rs. 1000.",
            icon: "warning",
            button: "OK",
        });
        return;
    }

    if (selectedPaymentMethod === 'UPI') {
        try {
            // Create a Razorpay order
            const response = await fetch('/user/create-razorpay-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ amount: amount * 100 }) // Convert to paise
            });

            if (!response.ok) {
                throw new Error('Failed to create Razorpay order.');
            }

            // Retrieve order data from response
            const orderData = await response.json();

            // Configure Razorpay options for payment handling
            const options = {
                key: 'rzp_test_qzAibN7X6K7MAx',
                amount: orderData.order.amount,
                currency: 'INR',
                name: 'BOOM Apparel Shopping',
                description: 'Order Payment',
                order_id: orderData.order.id,
                handler: async function (response) {
                    try {
                        // Construct payment details to send to server
                        const paymentDetails = {
                            selectedAddressId: selectedAddressId,
                            selectedPaymentMethod: selectedPaymentMethod,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature
                        };

                        // Send payment details to server for verification
                        const verificationResponse = await fetch('/user/orders/status', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(paymentDetails)
                        });

                        if (!verificationResponse.ok) {
                            throw new Error('Failed to verify payment.');
                        }

                        const data = await verificationResponse.json();

                        // Handle server response
                        if (data.success) {
                            // Redirect to thank you page on successful payment
                            window.location.href = '/user/thankyou';
                        } else {
                            // Display error and redirect to my orders page on payment failure
                            alert('Payment verification failed.');
                            window.location.href = '/user/my-orders';
                        }
                    } catch (error) {
                        console.error('Error processing payment:', error);
                        alert('Failed to process payment.');
                        window.location.href = '/user/orders/status'; // Redirect to orders page on failure
                    }
                },
                theme: {
                    color: '#3399cc'
                },
                modal: {
                    ondismiss: function () {
                        alert('Payment failed or was cancelled.');

                        // Create a form dynamically
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = '/user/orders/status'; // Your endpoint

                        // Create hidden input fields for payment details
                        const paymentDetails = {
                            selectedAddressId: selectedAddressId,
                            selectedPaymentMethod: selectedPaymentMethod,
                            razorpay_payment_id: '', // Empty because payment was not completed
                            razorpay_order_id: orderData.order.id,
                            razorpay_signature: ''
                        };

                        for (const key in paymentDetails) {
                            if (paymentDetails.hasOwnProperty(key)) {
                                const hiddenField = document.createElement('input');
                                hiddenField.type = 'hidden';
                                hiddenField.name = key;
                                hiddenField.value = paymentDetails[key];
                                form.appendChild(hiddenField);
                            }
                        }

                        // Append the form to the body and submit
                        document.body.appendChild(form);
                        form.submit();
                    }
                }
            };

            // Initialize Razorpay instance with options and open payment modal
            const rzp1 = new Razorpay(options);
            rzp1.open();

        } catch (error) {
            console.error('Error creating Razorpay order:', error);
            alert('Failed to create Razorpay order.');
        }
    } else if (selectedPaymentMethod === "COD") {
        const paymentDetails = {
            selectedAddressId: selectedAddressId,
            selectedPaymentMethod: selectedPaymentMethod
        };

        try {
            const response = await fetch('/user/orders/status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(paymentDetails)
            });

            if (!response.ok) {
                throw new Error('Failed to place order.');
            }

            const responseData = await response.json();

            if (responseData.success) {
                window.location.href = '/user/thankyou';
            } else {
                throw new Error('Failed to verify payment.');
            }

        } catch (error) {
            console.error('Error processing order:', error);
            alert('Failed to place order.');
        }
    }else if(selectedPaymentMethod === "wallet"){
        const paymentDetails = {
            selectedAddressId: selectedAddressId,
            selectedPaymentMethod: selectedPaymentMethod
        };
        console.log("payment details:",paymentDetails);
        try{
            const response= await fetch('/user/orders/status',{
                method:'POST',
                headers:{
                    'Content-Type': 'application/json'
                },
                body : JSON.stringify(paymentDetails)
            })
            if(!response.ok){
                throw new Error("Failed to place the order via your wallet")
            }

            const data = await response.json()
            if(data.success){
                window.location.href = '/user/thankyou'
            }else{
                throw new Error('Cannot continue with Wallet payment. Check your balance')
            }


        }catch(err){
            console.error("failed to pay via wallet",err);
            alert('Failed to place order.');
        }
        }
    }



    

    
</script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
</body>
</html>